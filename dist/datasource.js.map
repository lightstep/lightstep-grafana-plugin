{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","appEvents","defaultURL","on","console","log","options","LightStepDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","organizationName","jsonData","projectName","apiKey","targets","filter","t","hide","length","when","data","responses","map","savedSearchID","target","query","buildQueryParameters","response","doRequest","method","params","all","then","flatMap","results","result","attributes","replace","exemplars","datapoints","exemplar","timeWindows","oldest","timeWindow","youngest","concat","latencies","zip","status","message","title","catch","error","headers","datasourceRequest","range","from","to","resolutionMs","Math","max","diff","format","floor"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport appEvents from 'app/core/app_events';\n\nconst defaultURL = \"https://api.lightstep.com\";\n\nappEvents.on('graph-click', options => {\n  console.log(`TODO(LS-2233) - somehow open the lightstep trace summary page of ${options[\"item\"]}`)\n});\n\nexport class LightStepDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url || defaultURL;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.organizationName = instanceSettings.jsonData.organizationName;\n    this.projectName = instanceSettings.jsonData.projectName;\n    this.apiKey = instanceSettings.jsonData.apiKey;\n  }\n\n  headers() {\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': \"BEARER \" + this.apiKey,\n    };\n  }\n\n  query(options) {\n    const targets = options.targets.filter(t => !t.hide);\n\n    if (targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    const responses = targets.map(target => {\n      const savedSearchID = target.target;\n\n      const query = this.buildQueryParameters(options);\n      const response = this.doRequest({\n        url: `${this.url}/public/v0.1/${this.organizationName}/projects/${this.projectName}/searches/${savedSearchID}/timeseries`,\n        method: 'GET',\n        params: query,\n      });\n\n      return response;\n    });\n\n    return this.q.all(responses).then(results => {\n      const data = _.flatMap(results, result => {\n        const data = result[\"data\"][\"data\"];\n        const attributes = data[\"attributes\"];\n        const name = data[\"id\"].replace(\"/timeseries\", \"\");\n\n        const exemplars = {\n          target: `${name} exemplars`,\n          datapoints: attributes[\"exemplars\"].map(exemplar => {\n            return [\n              exemplar[\"duration_micros\"] / 1000,\n              moment(((exemplar[\"oldest_micros\"] + exemplar[\"youngest_micros\"]) / 2) / 1000),\n            ];\n          }),\n        };\n\n        const timeWindows = attributes[\"time-windows\"].map(timeWindow => {\n          const oldest = moment(timeWindow[\"oldest-time\"]);\n          const youngest = moment(timeWindow[\"youngest-time\"]);\n          return moment((oldest + youngest) / 2);\n        });\n\n        return _.concat(\n          attributes[\"latencies\"].map(latencies => {\n            return {\n              target: `${name} p${latencies[\"percentile\"]}`,\n              datapoints: _.zip(latencies[\"latency-ms\"], timeWindows),\n            };\n          }),\n          [exemplars],\n        );\n      });\n\n      return { data: data };\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: `${this.url}/public/v0.1/${this.organizationName}/projects/${this.projectName}/`,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    }).catch(error => {\n      return { status: \"error\", message: error, title: \"Error \" };\n    });\n  }\n\n  annotationQuery(options) {\n    return this.q.when({});\n  }\n\n  metricFindQuery(query) {\n    // TODO(LS-2230) - implement auto-complete here.\n    return this.q.when({});\n  }\n\n  doRequest(options) {\n    options.headers = this.headers();\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    const oldest = options.range.from;\n    const youngest = options.range.to;\n    const resolutionMs = Math.max(60000, oldest.diff(youngest) / 1440);\n\n    return {\n      \"oldest-time\": oldest.format(),\n      \"youngest-time\": youngest.format(),\n      \"resolution-ms\": Math.floor(resolutionMs),\n      // TODO(LS-2278) - both of these configurable.\n      \"include-exemplars\": \"1\",\n      \"percentile\": [ \"50\", \"99\", \"99.9\", \"99.99\" ],\n    }\n  }\n}\n"]}