{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","appEvents","defaultURL","on","console","log","options","LightStepDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","organizationName","jsonData","projectName","apiKey","targets","filter","t","hide","length","when","data","responses","map","savedSearchID","target","query","buildQueryParameters","response","doRequest","method","params","all","then","flatMap","results","result","attributes","replace","concat","parseLatencies","parseExemplars","status","message","title","catch","error","searches","search","savedSearchId","trim","text","value","headers","datasourceRequest","oldest","range","from","youngest","to","resolutionMs","Math","max","diff","format","floor","showExemplars","extractPercentiles","percentiles","timeWindows","timeWindow","latencies","datapoints","zip","exemplars","exemplar","split","percentile"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport appEvents from 'app/core/app_events';\n\nconst defaultURL = \"https://api.lightstep.com\";\n\nappEvents.on('graph-click', options => {\n  console.log(`TODO(LS-2233) - somehow open the lightstep trace summary page of ${options[\"item\"]}`)\n});\n\nexport class LightStepDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url || defaultURL;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.organizationName = instanceSettings.jsonData.organizationName;\n    this.projectName = instanceSettings.jsonData.projectName;\n    this.apiKey = instanceSettings.jsonData.apiKey;\n  }\n\n  headers() {\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': \"BEARER \" + this.apiKey,\n    };\n  }\n\n  query(options) {\n    const targets = options.targets.filter(t => !t.hide);\n\n    if (targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    const responses = targets.map(target => {\n      const savedSearchID = target.target;\n\n      const query = this.buildQueryParameters(options, target);\n      const response = this.doRequest({\n        url: `${this.url}/public/v0.1/${this.organizationName}/projects/${this.projectName}/searches/${savedSearchID}/timeseries`,\n        method: 'GET',\n        params: query,\n      });\n\n      return response;\n    });\n\n    return this.q.all(responses).then(results => {\n      const data = _.flatMap(results, result => {\n        const data = result[\"data\"][\"data\"];\n        const attributes = data[\"attributes\"];\n        const name = data[\"id\"].replace(\"/timeseries\", \"\");\n\n        return _.concat(\n          this.parseLatencies(name, attributes),\n          this.parseExemplars(name, attributes),\n        );\n      });\n\n      return { data: data };\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: `${this.url}/public/v0.1/${this.organizationName}/projects/${this.projectName}/`,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    }).catch(error => {\n      return { status: \"error\", message: error, title: \"Error \" };\n    });\n  }\n\n  annotationQuery(options) {\n    return this.q.when({});\n  }\n\n  metricFindQuery() {\n    return this.doRequest({\n      url: `${this.url}/public/v0.1/${this.organizationName}/projects/${this.projectName}/searches`,\n      method: 'GET',\n    }).then(response => {\n      const searches = response.data.data;\n      return _.flatMap(searches, search => {\n        const attributes = search[\"attributes\"];\n        const name = attributes[\"name\"];\n        const query = attributes[\"query\"];\n        const savedSearchId = search[\"id\"];\n\n        // Don't duplicate if the name and query are the same\n        if (name.trim() === query.trim()) {\n          return [ { text: name, value: savedSearchId } ];\n        }\n\n        return [\n          { text: query, value: savedSearchId },\n          { text: name, value: savedSearchId },\n        ];\n      });\n    });\n  }\n\n  doRequest(options) {\n    options.headers = this.headers();\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options, target) {\n    const oldest = options.range.from;\n    const youngest = options.range.to;\n    const resolutionMs = Math.max(60000, oldest.diff(youngest) / 1440);\n\n    return {\n      \"oldest-time\": oldest.format(),\n      \"youngest-time\": youngest.format(),\n      \"resolution-ms\": Math.floor(resolutionMs),\n      \"include-exemplars\": target.showExemplars ? \"1\" : \"0\",\n      \"percentile\": this.extractPercentiles(target.percentiles),\n    };\n  }\n\n  parseLatencies(name, attributes) {\n    if (!attributes[\"time-windows\"] || !attributes[\"latencies\"]) {\n      return [];\n    }\n\n    const timeWindows = attributes[\"time-windows\"].map(timeWindow => {\n      const oldest = moment(timeWindow[\"oldest-time\"]);\n      const youngest = moment(timeWindow[\"youngest-time\"]);\n      return moment((oldest + youngest) / 2);\n    });\n\n    return attributes[\"latencies\"].map(latencies => {\n      return {\n        target: `${name} p${latencies[\"percentile\"]}`,\n        datapoints: _.zip(latencies[\"latency-ms\"], timeWindows),\n      };\n    })\n  }\n\n  parseExemplars(name, attributes) {\n    const exemplars = attributes[\"exemplars\"]\n    if (!exemplars) {\n      return [];\n    }\n    return [{\n      target: `${name} exemplars`,\n      datapoints: exemplars.map(exemplar => {\n        return [\n          exemplar[\"duration_micros\"] / 1000,\n          moment(((exemplar[\"oldest_micros\"] + exemplar[\"youngest_micros\"]) / 2) / 1000),\n        ];\n      }),\n    }];\n  }\n\n  extractPercentiles(percentiles) {\n    if (!percentiles) {\n      return [];\n    }\n    return percentiles\n      .split(\",\")\n      .map(percentile => percentile.replace(/(^\\s+|\\s+$)/g,''))\n      .filter(percentile => percentile);\n  }\n}\n"]}