{"version":3,"sources":["../src/datasource.js"],"names":["_","appEvents","defaultURL","on","console","log","options","LightStepDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","organizationName","jsonData","projectName","apiKey","targets","filter","t","hide","target","length","when","data","savedSearchID","query","buildQueryParameters","doRequest","method","then","response","status","message","title","catch","error","headers","datasourceRequest","map","replace","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport appEvents from 'app/core/app_events';\n\nvar defaultURL = \"https://api.lightstep.com\"\n\nappEvents.on('graph-click', options => {\n  console.log(`TODO() - somehow open the lightstep trace summary page of ${options[\"item\"]}`)\n});\n\nexport class LightStepDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url || defaultURL;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.organizationName = instanceSettings.jsonData.organizationName;\n    this.projectName = instanceSettings.jsonData.projectName;\n    this.apiKey = instanceSettings.jsonData.apiKey;\n  }\n\n  headers() {\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': \"BEARER \" + this.apiKey,\n    };\n  }\n\n  query(options) {\n    var targets = options.targets\n      .filter(t => !t.hide)\n      .filter(options.targets, target => {\n        return target.target !== 'select metric';\n      });\n\n    if (targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n    var savedSearchID = target[0]\n\n    var query = this.buildQueryParameters(options);\n    return this.doRequest({\n      url: this.url + \"/public/v0.1/\" + this.organizationName + \"/projects/\" + this.projectName + \"/searches/\" + savedSearchID + \"/timeseries\",\n      data: query,\n      method: 'POST'\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    }).catch(error => {\n      return { status: \"error\", message: error, title: \"Error \" };\n      }\n    )\n  }\n\n  annotationQuery(options) {\n    return this.q.when({})\n  }\n\n  metricFindQuery(query) {\n    return this.q.when({})\n  }\n\n  doRequest(options) {\n    options.headers = this.headers();\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    // remove placeholder targets\n    options.targets = _;\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}