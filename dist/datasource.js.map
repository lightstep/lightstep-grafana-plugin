{"version":3,"sources":["../src/datasource.js"],"names":["_","LightStepDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","organizationName","projectName","accessToken","headers","options","targets","filter","t","hide","target","length","when","data","savedSearchID","query","buildQueryParameters","doRequest","method","then","response","status","message","title","catch","error","datasourceRequest","map","replace","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class LightStepDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.organizationName = instanceSettings.organizationName;\n    this.projectName = instanceSettings.projectName;\n    this.accessToken = instanceSettings.accessToken;\n    this.headers = {\n      'Content-Type': 'application/json',\n      'Authorization': \"BEARER \" + instanceSettings.accessToken,\n    };\n  }\n\n  query(options) {\n    var targets = options.targets\n      .filter(t => !t.hide)\n      .filter(options.targets, target => {\n        return target.target !== 'select metric';\n      });\n\n    if (targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n    var savedSearchID = target[0]\n\n    var query = this.buildQueryParameters(options);\n    return this.doRequest({\n      url: this.url + \"/public/v0.1/\" + this.organizationName + \"/projects/\" + this.projectName + \"/searches/\" + savedSearchID + \"/timeseries\",\n      data: query,\n      method: 'POST'\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    }).catch(error => {\n      return { status: \"error\", message: error, title: \"Error \" };\n      }\n    )\n  }\n\n  annotationQuery(options) {\n    return this.q.when({})\n  }\n\n  metricFindQuery(query) {\n    return this.q.when({})\n  }\n\n  doRequest(options) {\n    options.headers = this.headers;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    // remove placeholder targets\n    options.targets = _;\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}