{"version":3,"sources":["../../src/lightstep-datasource/datasource.js"],"names":["_","moment","appEvents","maxDataPointsServer","minResolutionServer","on","link","get","options","window","open","LightStepDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","dashboardURL","jsonData","name","q","organizationName","projectName","apiKey","targets","filter","t","hide","maxDataPoints","length","when","data","responses","map","savedSearchID","replace","target","savedSearchName","replaceWithText","undefined","query","buildQueryParameters","showErrorCountsAsRate","Boolean","response","doRequest","method","params","then","result","displayName","res","all","flatMap","attributes","ops","parseCount","errs","parseRateFromCounts","concat","parseLatencies","parseExemplars","status","message","title","catch","error","searches","search","savedSearchId","trim","text","value","headers","datasourceRequest","oldest","range","from","youngest","to","resolutionMs","Math","max","diff","min","format","floor","showExemplars","showOpsCounts","showErrorCounts","extractPercentiles","percentiles","timeWindows","timeWindow","latencies","datapoints","zip","exemplars","exemplarMap","groupBy","exemplar","parseExemplar","skip","ceil","ignored","index","traceLink","spanGuid","key","errors","timeMap","forEach","p","toISOString","timestamp","curr","errCount","opsCount","toFixed","Object","keys","k","v","toString","split","percentile"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport appEvents from 'app/core/app_events';\n\nconst maxDataPointsServer = 1440;\nconst minResolutionServer = 60000;\n\n// TODO - this is a work around given the existing graph API\n// Having a better mechanism for click capture would be ideal.\nappEvents.on('graph-click', options => {\n  const link = _.get(options, [\n    'ctrl',\n    'dataList',\n    _.get(options, ['item', 'seriesIndex']),\n    'datapoints',\n    _.get(options, ['item', 'dataIndex']),\n    'link',\n  ]);\n  if (link) {\n    window.open(link, '_blank');\n  }\n});\n\nexport class LightStepDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.dashboardURL = instanceSettings.jsonData.dashboardURL;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.organizationName = instanceSettings.jsonData.organizationName;\n    this.projectName = instanceSettings.jsonData.projectName;\n    this.apiKey = instanceSettings.jsonData.apiKey;\n  }\n\n  headers() {\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': \"BEARER \" + this.apiKey,\n    };\n  }\n\n  query(options) {\n    const targets = options.targets.filter(t => !t.hide);\n    const maxDataPoints = options.maxDataPoints;\n\n    if (targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    const responses = targets.map(target => {\n      const savedSearchID = this.templateSrv.replace(target.target);\n      const savedSearchName = this.templateSrv.replaceWithText(target.target);\n\n      if (!savedSearchID) {\n        return this.q.when(undefined);\n      }\n\n      const query = this.buildQueryParameters(options, target, maxDataPoints);\n      const showErrorCountsAsRate = Boolean(target.showErrorCountsAsRate); \n      const response = this.doRequest({\n        url: `${this.url}/public/v0.1/${this.organizationName}/projects/${this.projectName}/searches/${savedSearchID}/timeseries`,\n        method: 'GET',\n        params: query,\n      });\n\n      response.then(result => {\n        if (result && result[\"data\"][\"data\"]) {\n          if (target.displayName) {\n            result[\"data\"][\"data\"][\"name\"] = this.templateSrv.replaceWithText(target.displayName);\n          } else {\n            result[\"data\"][\"data\"][\"name\"] = savedSearchName;\n          }\n        }\n      });\n\n      return response.then((res) => {\n        res.showErrorCountsAsRate = showErrorCountsAsRate;\n        return res;\n      });\n    });\n\n    return this.q.all(responses).then(response => {\n      const data = _.flatMap(response, result => {\n        if (!result) {\n          return [];\n        }\n        const data = result[\"data\"][\"data\"];\n        const attributes = data[\"attributes\"];\n        const name = data[\"name\"];\n        const ops = this.parseCount(`${name} Ops counts`, \"ops-counts\", attributes);\n        let errs = this.parseCount(`${name} Error counts`, \"error-counts\", attributes);\n        if (result.showErrorCountsAsRate) {\n          errs = this.parseRateFromCounts(`${name} Error rate`, errs, ops);\n        }\n\n        return _.concat(\n          this.parseLatencies(name, attributes),\n          this.parseExemplars(name, attributes, maxDataPoints),\n          ops,\n          errs,\n        );\n      });\n\n      return { data: data };\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: `${this.url}/public/v0.1/${this.organizationName}/projects/${this.projectName}`,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    }).catch(error => {\n      return { status: \"error\", message: error, title: \"Error \" };\n    });\n  }\n\n  annotationQuery(options) {\n    return this.q.when({});\n  }\n\n  metricFindQuery() {\n    return this.doRequest({\n      url: `${this.url}/public/v0.1/${this.organizationName}/projects/${this.projectName}/searches`,\n      method: 'GET',\n    }).then(response => {\n      const searches = response.data.data;\n      return _.flatMap(searches, search => {\n        const attributes = search[\"attributes\"];\n        const name = attributes[\"name\"];\n        const query = attributes[\"query\"];\n        const savedSearchId = search[\"id\"];\n\n        // Don't duplicate if the name and query are the same\n        if (name.trim() === query.trim()) {\n          return [ { text: name, value: savedSearchId } ];\n        }\n\n        return [\n          { text: query, value: savedSearchId },\n          { text: name, value: savedSearchId },\n        ];\n      });\n    });\n  }\n\n  doRequest(options) {\n    options.headers = this.headers();\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options, target, maxDataPoints) {\n    const oldest = options.range.from;\n    const youngest = options.range.to;\n\n    const resolutionMs = Math.max(\n      youngest.diff(oldest) / Math.min(\n        maxDataPoints,\n        maxDataPointsServer\n      ),\n      minResolutionServer\n    );\n\n    return {\n      \"oldest-time\": oldest.format(),\n      \"youngest-time\": youngest.format(),\n      \"resolution-ms\": Math.floor(resolutionMs),\n      \"include-exemplars\": target.showExemplars ? \"1\" : \"0\",\n      \"include-ops-counts\": target.showOpsCounts ? \"1\" : \"0\",\n      \"include-error-counts\": target.showErrorCounts ? \"1\" : \"0\",\n      \"percentile\": this.extractPercentiles(target.percentiles),\n    };\n  }\n\n  parseLatencies(name, attributes) {\n    if (!attributes[\"time-windows\"] || !attributes[\"latencies\"]) {\n      return [];\n    }\n\n    const timeWindows = attributes[\"time-windows\"].map(timeWindow => {\n      const oldest = moment(timeWindow[\"oldest-time\"]);\n      const youngest = moment(timeWindow[\"youngest-time\"]);\n      return moment((oldest + youngest) / 2);\n    });\n\n    return attributes[\"latencies\"].map(latencies => {\n      return {\n        target: `${name} p${latencies[\"percentile\"]}`,\n        datapoints: _.zip(latencies[\"latency-ms\"], timeWindows),\n      };\n    })\n  }\n\n  parseExemplars(name, attributes, maxDataPoints) {\n    const exemplars = attributes[\"exemplars\"];\n    if (!exemplars) {\n      return [];\n    }\n    const exemplarMap = _.groupBy(exemplars, exemplar => exemplar[\"has_error\"]);\n\n    return _.concat(\n      this.parseExemplar(`${name} traces`, exemplarMap[false], maxDataPoints),\n      this.parseExemplar(`${name} error traces`, exemplarMap[true], maxDataPoints),\n    )\n  }\n\n  parseExemplar(name, exemplars, maxDataPoints) {\n    if (!exemplars) {\n      return []\n    }\n    if (maxDataPoints && exemplars.length > maxDataPoints) {\n      const skip = Math.ceil(exemplars.length / maxDataPoints);\n      exemplars = exemplars.filter((ignored, index) => index % skip === 0);\n    }\n    return [{\n      target: name,\n      datapoints: exemplars.map(exemplar => {\n        return {\n          0: exemplar[\"duration_micros\"] / 1000,\n          1: moment(((exemplar[\"oldest_micros\"] + exemplar[\"youngest_micros\"]) / 2) / 1000),\n          \"link\": this.traceLink(exemplar),\n        };\n      }),\n    }];\n  }\n\n  traceLink(exemplar) {\n    const spanGuid = exemplar[\"span_guid\"];\n    if (!spanGuid) {\n      return\n    }\n    return `${this.dashboardURL}/${this.projectName}/trace?span_guid=${spanGuid}`\n  }\n\n  parseCount(name, key, attributes) {\n    if (!attributes[\"time-windows\"] || !attributes[key]) {\n      return [];\n    }\n\n    const timeWindows = attributes[\"time-windows\"].map(timeWindow => {\n      const oldest = moment(timeWindow[\"oldest-time\"]);\n      const youngest = moment(timeWindow[\"youngest-time\"]);\n      return moment((oldest + youngest) / 2);\n    });\n  \n    return [{\n      target: name,\n      datapoints: _.zip(attributes[key], timeWindows),\n    }]\n  }\n\n  parseRateFromCounts(name, errors, ops) {\n    if (!errors[0] || !ops[0] || !errors[0].datapoints || !ops[0].datapoints || (errors[0].datapoints.length != ops[0].datapoints.length)) {\n      return [];\n    }\n  \n    let timeMap = {};\n    // make a map of moment ISO timestamps\n    errors[0].datapoints.forEach((p) => {\n      // store error count in 0\n      // store original moment object in 1\n      timeMap[p[1].toISOString()] = [p[0], p[1]];\n    });\n\n    ops[0].datapoints.forEach((p) => {\n      let timestamp = p[1].toISOString();\n      // retrieve corresponding error count value from timeMap\n      let curr = timeMap[timestamp]; // curr[0] = error count, curr[1] is original moment object\n      // only do math if the points exist & are non-zero\n      let errCount = curr[0];\n      if (!errCount) {\n        return;\n      }\n      let opsCount = p[0];\n      if (errCount == 0 || opsCount == 0) {\n        timeMap[timestamp] = [0, curr[1]];\n      } else {\n        let res = ((errCount / opsCount)*100).toFixed(2);\n        timeMap[timestamp] = [res, curr[1]];\n      }\n    });\n\n    let datapoints = Object.keys(timeMap).map((k) => {\n      // restore moment object\n      let v = timeMap[k];\n      return [v[0], v[1]];\n    });\n\n    return [{\n      target: name,\n      datapoints,\n    }];\n  }\n\n  extractPercentiles(percentiles) {\n    if (!percentiles) {\n      return [];\n    }\n    return (percentiles)\n      .toString()\n      .split(\",\")\n      .map(percentile => percentile.replace(/(^\\s+|\\s+$)/g,''))\n      .filter(percentile => percentile);\n  }\n}\n"]}