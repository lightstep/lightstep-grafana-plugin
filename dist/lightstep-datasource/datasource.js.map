{"version":3,"sources":["../../src/lightstep-datasource/datasource.js"],"names":["_","moment","appEvents","defaultApiURL","defaultDashobardURL","on","link","get","options","window","open","LightStepDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","dashboardURL","jsonData","name","q","organizationName","projectName","apiKey","targets","filter","t","hide","length","when","data","responses","map","savedSearchID","target","query","buildQueryParameters","response","doRequest","method","params","all","then","flatMap","results","result","attributes","replace","concat","parseLatencies","parseExemplars","metricFindQuery","status","message","title","catch","error","searches","search","savedSearchId","trim","text","value","headers","datasourceRequest","oldest","range","from","youngest","to","resolutionMs","Math","max","diff","format","floor","showExemplars","extractPercentiles","percentiles","timeWindows","timeWindow","latencies","datapoints","zip","exemplars","exemplarMap","groupBy","exemplar","parseExemplar","traceLink","spanGuid","split","percentile"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport appEvents from 'app/core/app_events';\n\nconst defaultApiURL = \"https://api.lightstep.com\";\nconst defaultDashobardURL = \"https://app.lightstep.com\";\n\n// TODO - this is a work around given the existing graph API\n// Having a better mechanism for click capture would be ideal.\nappEvents.on('graph-click', options => {\n  const link = _.get(options, [\n    'ctrl',\n    'dataList',\n    _.get(options, ['item', 'seriesIndex']),\n    'datapoints',\n    _.get(options, ['item', 'dataIndex']),\n    'link',\n  ]);\n  if (link) {\n    window.open(link, '_blank');\n  }\n});\n\nexport class LightStepDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url || defaultApiURL;\n    this.dashboardURL = instanceSettings.jsonData.dashboardURL || defaultDashobardURL;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.organizationName = instanceSettings.jsonData.organizationName;\n    this.projectName = instanceSettings.jsonData.projectName;\n    this.apiKey = instanceSettings.jsonData.apiKey;\n  }\n\n  headers() {\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': \"BEARER \" + this.apiKey,\n    };\n  }\n\n  query(options) {\n    const targets = options.targets.filter(t => !t.hide);\n\n    if (targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    const responses = targets.map(target => {\n      const savedSearchID = target.target;\n\n      const query = this.buildQueryParameters(options, target);\n      const response = this.doRequest({\n        url: `${this.url}/public/v0.1/${this.organizationName}/projects/${this.projectName}/searches/${savedSearchID}/timeseries`,\n        method: 'GET',\n        params: query,\n      });\n\n      return response;\n    });\n\n    return this.q.all(responses).then(results => {\n      const data = _.flatMap(results, result => {\n        const data = result[\"data\"][\"data\"];\n        const attributes = data[\"attributes\"];\n        const name = data[\"id\"].replace(\"/timeseries\", \"\");\n\n        return _.concat(\n          this.parseLatencies(name, attributes),\n          this.parseExemplars(name, attributes),\n        );\n      });\n\n      return { data: data };\n    });\n  }\n\n  testDatasource() {\n    return metricFindQuery().then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    }).catch(error => {\n      return { status: \"error\", message: error, title: \"Error \" };\n    });\n  }\n\n  annotationQuery(options) {\n    return this.q.when({});\n  }\n\n  metricFindQuery() {\n    return this.doRequest({\n      url: `${this.url}/public/v0.1/${this.organizationName}/projects/${this.projectName}/searches`,\n      method: 'GET',\n    }).then(response => {\n      const searches = response.data.data;\n      return _.flatMap(searches, search => {\n        const attributes = search[\"attributes\"];\n        const name = attributes[\"name\"];\n        const query = attributes[\"query\"];\n        const savedSearchId = search[\"id\"];\n\n        // Don't duplicate if the name and query are the same\n        if (name.trim() === query.trim()) {\n          return [ { text: name, value: savedSearchId } ];\n        }\n\n        return [\n          { text: query, value: savedSearchId },\n          { text: name, value: savedSearchId },\n        ];\n      });\n    });\n  }\n\n  doRequest(options) {\n    options.headers = this.headers();\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options, target) {\n    const oldest = options.range.from;\n    const youngest = options.range.to;\n    const resolutionMs = Math.max(60000, oldest.diff(youngest) / 1440);\n\n    return {\n      \"oldest-time\": oldest.format(),\n      \"youngest-time\": youngest.format(),\n      \"resolution-ms\": Math.floor(resolutionMs),\n      \"include-exemplars\": target.showExemplars ? \"1\" : \"0\",\n      \"percentile\": this.extractPercentiles(target.percentiles),\n    };\n  }\n\n  parseLatencies(name, attributes) {\n    if (!attributes[\"time-windows\"] || !attributes[\"latencies\"]) {\n      return [];\n    }\n\n    const timeWindows = attributes[\"time-windows\"].map(timeWindow => {\n      const oldest = moment(timeWindow[\"oldest-time\"]);\n      const youngest = moment(timeWindow[\"youngest-time\"]);\n      return moment((oldest + youngest) / 2);\n    });\n\n    return attributes[\"latencies\"].map(latencies => {\n      return {\n        target: `${name} p${latencies[\"percentile\"]}`,\n        datapoints: _.zip(latencies[\"latency-ms\"], timeWindows),\n      };\n    })\n  }\n\n  parseExemplars(name, attributes) {\n    const exemplars = attributes[\"exemplars\"]\n    if (!exemplars) {\n      return [];\n    }\n    const exemplarMap = _.groupBy(exemplars, exemplar => exemplar[\"has_error\"]);\n\n    return _.concat(\n      this.parseExemplar(`${name} exemplars`, exemplarMap[false]),\n      this.parseExemplar(`${name} error exemplars`, exemplarMap[true]),\n    )\n  }\n\n  parseExemplar(name, exemplars) {\n    if (!exemplars) {\n      return []\n    }\n    return [{\n      target: name,\n      datapoints: exemplars.map(exemplar => {\n        return {\n          0: exemplar[\"duration_micros\"] / 1000,\n          1: moment(((exemplar[\"oldest_micros\"] + exemplar[\"youngest_micros\"]) / 2) / 1000),\n          \"link\": this.traceLink(exemplar),\n        };\n      }),\n    }];\n  }\n\n  traceLink(exemplar) {\n    const spanGuid = exemplar[\"span_guid\"];\n    if (!spanGuid) {\n      return\n    }\n    return `${this.dashboardURL}/${this.projectName}/trace?span_guid=${spanGuid}`\n  }\n\n  extractPercentiles(percentiles) {\n    if (!percentiles) {\n      return [];\n    }\n    return percentiles\n      .split(\",\")\n      .map(percentile => percentile.replace(/(^\\s+|\\s+$)/g,''))\n      .filter(percentile => percentile);\n  }\n}\n"]}