{"version":3,"sources":["../../src/lightstep-datasource/datasource.js"],"names":["_","moment","appEvents","maxDataPointsServer","minResolutionServer","on","link","get","options","window","open","LightStepDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","dashboardURL","jsonData","name","q","organizationName","projectName","apiKey","targets","filter","t","hide","maxDataPoints","length","when","data","responses","map","savedSearchID","target","undefined","query","buildQueryParameters","response","doRequest","method","params","all","then","flatMap","results","result","attributes","replace","concat","parseLatencies","parseExemplars","status","message","title","catch","error","searches","search","savedSearchId","trim","text","value","headers","datasourceRequest","oldest","range","from","youngest","to","resolutionMs","Math","max","diff","min","format","floor","showExemplars","extractPercentiles","percentiles","timeWindows","timeWindow","latencies","datapoints","zip","exemplars","exemplarMap","groupBy","exemplar","parseExemplar","skip","ceil","ignored","index","traceLink","spanGuid","toString","split","percentile"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport appEvents from 'app/core/app_events';\n\nconst maxDataPointsServer = 1440;\nconst minResolutionServer = 60000;\n\n// TODO - this is a work around given the existing graph API\n// Having a better mechanism for click capture would be ideal.\nappEvents.on('graph-click', options => {\n  const link = _.get(options, [\n    'ctrl',\n    'dataList',\n    _.get(options, ['item', 'seriesIndex']),\n    'datapoints',\n    _.get(options, ['item', 'dataIndex']),\n    'link',\n  ]);\n  if (link) {\n    window.open(link, '_blank');\n  }\n});\n\nexport class LightStepDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.dashboardURL = instanceSettings.jsonData.dashboardURL;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.organizationName = instanceSettings.jsonData.organizationName;\n    this.projectName = instanceSettings.jsonData.projectName;\n    this.apiKey = instanceSettings.jsonData.apiKey;\n  }\n\n  headers() {\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': \"BEARER \" + this.apiKey,\n    };\n  }\n\n  query(options) {\n    const targets = options.targets.filter(t => !t.hide);\n    const maxDataPoints = options.maxDataPoints;\n\n    if (targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    const responses = targets.map(target => {\n      const savedSearchID = target.target;\n\n      if (!savedSearchID) {\n        return this.q.when(undefined);\n      }\n\n      const query = this.buildQueryParameters(options, target, maxDataPoints);\n      const response = this.doRequest({\n        url: `${this.url}/public/v0.1/${this.organizationName}/projects/${this.projectName}/searches/${savedSearchID}/timeseries`,\n        method: 'GET',\n        params: query,\n      });\n\n      return response;\n    });\n\n    return this.q.all(responses).then(results => {\n      const data = _.flatMap(results, result => {\n        if (!result) {\n          return [];\n        }\n\n        const data = result[\"data\"][\"data\"];\n        const attributes = data[\"attributes\"];\n        const name = data[\"id\"].replace(\"/timeseries\", \"\");\n\n        return _.concat(\n          this.parseLatencies(name, attributes),\n          this.parseExemplars(name, attributes, maxDataPoints),\n        );\n      });\n\n      return { data: data };\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: `${this.url}/public/v0.1/${this.organizationName}/projects/${this.projectName}`,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    }).catch(error => {\n      return { status: \"error\", message: error, title: \"Error \" };\n    });\n  }\n\n  annotationQuery(options) {\n    return this.q.when({});\n  }\n\n  metricFindQuery() {\n    return this.doRequest({\n      url: `${this.url}/public/v0.1/${this.organizationName}/projects/${this.projectName}/searches`,\n      method: 'GET',\n    }).then(response => {\n      const searches = response.data.data;\n      return _.flatMap(searches, search => {\n        const attributes = search[\"attributes\"];\n        const name = attributes[\"name\"];\n        const query = attributes[\"query\"];\n        const savedSearchId = search[\"id\"];\n\n        // Don't duplicate if the name and query are the same\n        if (name.trim() === query.trim()) {\n          return [ { text: name, value: savedSearchId } ];\n        }\n\n        return [\n          { text: query, value: savedSearchId },\n          { text: name, value: savedSearchId },\n        ];\n      });\n    });\n  }\n\n  doRequest(options) {\n    options.headers = this.headers();\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options, target, maxDataPoints) {\n    const oldest = options.range.from;\n    const youngest = options.range.to;\n\n    const resolutionMs = Math.max(\n      youngest.diff(oldest) / Math.min(\n        maxDataPoints,\n        maxDataPointsServer\n      ),\n      minResolutionServer\n    );\n\n    return {\n      \"oldest-time\": oldest.format(),\n      \"youngest-time\": youngest.format(),\n      \"resolution-ms\": Math.floor(resolutionMs),\n      \"include-exemplars\": target.showExemplars ? \"1\" : \"0\",\n      \"percentile\": this.extractPercentiles(target.percentiles),\n    };\n  }\n\n  parseLatencies(name, attributes) {\n    if (!attributes[\"time-windows\"] || !attributes[\"latencies\"]) {\n      return [];\n    }\n\n    const timeWindows = attributes[\"time-windows\"].map(timeWindow => {\n      const oldest = moment(timeWindow[\"oldest-time\"]);\n      const youngest = moment(timeWindow[\"youngest-time\"]);\n      return moment((oldest + youngest) / 2);\n    });\n\n    return attributes[\"latencies\"].map(latencies => {\n      return {\n        target: `${name} p${latencies[\"percentile\"]}`,\n        datapoints: _.zip(latencies[\"latency-ms\"], timeWindows),\n      };\n    })\n  }\n\n  parseExemplars(name, attributes, maxDataPoints) {\n    const exemplars = attributes[\"exemplars\"];\n    if (!exemplars) {\n      return [];\n    }\n    const exemplarMap = _.groupBy(exemplars, exemplar => exemplar[\"has_error\"]);\n\n    return _.concat(\n      this.parseExemplar(`${name} traces`, exemplarMap[false], maxDataPoints),\n      this.parseExemplar(`${name} error traces`, exemplarMap[true], maxDataPoints),\n    )\n  }\n\n  parseExemplar(name, exemplars, maxDataPoints) {\n    if (!exemplars) {\n      return []\n    }\n    if (maxDataPoints && exemplars.length > maxDataPoints) {\n      const skip = Math.ceil(exemplars.length / maxDataPoints);\n      exemplars = exemplars.filter((ignored, index) => index % skip === 0);\n    }\n    return [{\n      target: name,\n      datapoints: exemplars.map(exemplar => {\n        return {\n          0: exemplar[\"duration_micros\"] / 1000,\n          1: moment(((exemplar[\"oldest_micros\"] + exemplar[\"youngest_micros\"]) / 2) / 1000),\n          \"link\": this.traceLink(exemplar),\n        };\n      }),\n    }];\n  }\n\n  traceLink(exemplar) {\n    const spanGuid = exemplar[\"span_guid\"];\n    if (!spanGuid) {\n      return\n    }\n    return `${this.dashboardURL}/${this.projectName}/trace?span_guid=${spanGuid}`\n  }\n\n  extractPercentiles(percentiles) {\n    if (!percentiles) {\n      return [];\n    }\n    return (percentiles)\n      .toString()\n      .split(\",\")\n      .map(percentile => percentile.replace(/(^\\s+|\\s+$)/g,''))\n      .filter(percentile => percentile);\n  }\n}\n"]}